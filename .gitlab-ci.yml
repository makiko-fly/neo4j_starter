# Code generated by guidedog. DO NOT EDIT.
image: d-hub.wallstcn.com:5000/wallstreetcn/build-base:latest
stages:
- test
- build
- release
- deployment

variables:
  DOCKER_DRIVER: overlay
  SERVICE_NAME: xgbkb
  NAMESPACE: xuangubao
  IMAGE_NAME: ccr.ccs.tencentyun.com/dhub.wallstcn.com/xgbkb
  CONTAINER_TEST_IMAGE: $IMAGE_NAME:$CI_BUILD_REF_NAME
  CONTAINER_RELEASE_IMAGE: $IMAGE_NAME:latest

test:1.11:
  image: golang:1.11
  stage: test
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$IVANKA_PUBLISH_SSH_PRIVATE_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - make deps
    - export PATH=/tmp/govendor/bin:$PATH
    - export GOPATH=/tmp/govendor/:$GOPATH
    - make test

build:
  image: golang:1.11
  stage: build
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$IVANKA_PUBLISH_SSH_PRIVATE_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - make deps
    - export PATH=/tmp/govendor/bin:$PATH
    - export GOPATH=/tmp/govendor/:$GOPATH
    - make build
    - mkdir -p binaries
    - mv ./server binaries/
  artifacts:
    paths:
      - public/
      - binaries/
    expire_in: 1h
  only:
    - sit
    - master

build:istio:
  image: ccr.ccs.tencentyun.com/dhub.wallstcn.com/golang:1.11
  stage: build
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$IVANKA_PUBLISH_SSH_PRIVATE_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - export PATH=/tmp/govendor/bin:$PATH
    - make deps
    - make istio
    - export GOPATH=/tmp/govendor/:$GOPATH
    - make build
    - mkdir -p binaries
    - mv ./server binaries/
  artifacts:
    paths:
      - binaries/
    expire_in: 1h
  only:
    - sit
    - master

release:prod:
  stage: release
  script:
    - cp binaries/server .
    - REVISION=`git rev-parse --short=8 HEAD || echo unknown`
    - docker login --username=3518936217 ccr.ccs.tencentyun.com -p "$CI_DOCKER_REGISTRY_TOKEN"
    - docker build --tag="$CONTAINER_RELEASE_IMAGE" .
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker build --tag="$IMAGE_NAME:$REVISION" .
    - docker push "$IMAGE_NAME:$REVISION"
  only:
    - master
  dependencies:
    - build

release:prod-istio:
  stage: release
  script:
    - cp binaries/server .
    - REVISION=`git rev-parse --short=8 HEAD || echo unknown`
    - docker login --username=3518936217 ccr.ccs.tencentyun.com -p "$CI_DOCKER_REGISTRY_TOKEN"
    - docker build --tag="$IMAGE_NAME:istio-$REVISION" .
    - docker push "$IMAGE_NAME:istio-$REVISION"
  only:
    - master
  dependencies:
    - build:istio

release:sit:
  stage: release
  script:
    - pwd
    - ls binaries
    - cp binaries/server .
    - REVISION=`git rev-parse --short HEAD || echo unknown`
    - docker login --username=3518936217 ccr.ccs.tencentyun.com -p "$CI_DOCKER_REGISTRY_TOKEN"
    - docker build --tag="$IMAGE_NAME:sit" .
    - docker push "$IMAGE_NAME:sit"
  only:
    - sit
  dependencies:
    - build

release:istio:
  stage: release
  script:
    - pwd
    - ls binaries
    - cp binaries/server .
    - REVISION=`git rev-parse --short HEAD || echo unknown`
    - docker login --username=3518936217 ccr.ccs.tencentyun.com -p "$CI_DOCKER_REGISTRY_TOKEN"
    - docker build --tag="$IMAGE_NAME:istio-sit" .
    - docker push "$IMAGE_NAME:istio-sit"
  only:
    - sit
  dependencies:
    - build:istio

deployment:sit:
  stage: deployment
  image: kroniak/ssh-client
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$IVANKA_PUBLISH_SSH_PRIVATE_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh ubuntu@115.159.224.129 "kubectl scale --namespace=$NAMESPACE --replicas=0 deployment/$SERVICE_NAME && kubectl scale --namespace=$NAMESPACE --replicas=1 deployment/$SERVICE_NAME"
    #- ssh ubuntu@115.159.224.129 "kubectl scale --namespace=$NAMESPACE --replicas=0 deployment/$SERVICE_NAME-grpc && kubectl scale --namespace=$NAMESPACE --replicas=1 deployment/$SERVICE_NAME-grpc"
  only:
    - sit

#deployment:stage:
#  stage: deployment
#  image: kroniak/ssh-client
#  before_script:
#    # Install ssh-agent if not already installed, it is required by Docker.
#    # (change apt-get to yum if you use a CentOS-based image)
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#    # Run ssh-agent (inside the build environment)
#    - eval $(ssh-agent -s)
#    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
#    - ssh-add <(echo "$IVANKA_PUBLISH_SSH_PRIVATE_KEY")
#    # For Docker builds disable host key checking. Be aware that by adding that
#    # you are suspectible to man-in-the-middle attacks.
#    # WARNING: Use this only with the Docker executor, if you use it with shell
#    # you will overwrite your user's SSH config.
#    - mkdir -p ~/.ssh
#    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#  only:
#    - master
#  script:
#    - ssh ubuntu@115.159.108.254 "kubessh grafana restart $SERVICE_NAME"
